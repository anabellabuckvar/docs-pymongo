.. uses geo.rst

Indexing
--------

Adding indexes can help accelerate certain queries and can also add additional
functionality to querying and storing documents. In this example, we'll
demonstrate how to create a `unique index
<http://mongodb.com/docs/manual/core/index-unique/>`_ on a key that rejects
documents whose value for that key already exists in the index.

First, we'll need to create the index:

.. code-block:: python

   >>> result = db.profiles.create_index([("user_id", pymongo.ASCENDING)], unique=True)
   >>> sorted(list(db.profiles.index_information()))
   ['_id_', 'user_id_1']

Notice that we have two indexes now: one is the index on ``_id`` that MongoDB
creates automatically, and the other is the index on ``user_id`` we just
created.

Now let's set up some user profiles:

.. code-block:: python

   >>> user_profiles = [{"user_id": 211, "name": "Luke"}, {"user_id": 212, "name": "Ziltoid"}]
   >>> result = db.profiles.insert_many(user_profiles)

The index prevents us from inserting a document whose ``user_id`` is already in
the collection:

.. code-block:: python

   >>> new_profile = {"user_id": 213, "name": "Drew"}
   >>> duplicate_profile = {"user_id": 212, "name": "Tommy"}
   >>> result = db.profiles.insert_one(new_profile)  # This is fine.
   >>> result = db.profiles.insert_one(duplicate_profile)
   Traceback (most recent call last):
   DuplicateKeyError: E11000 duplicate key error index: test_database.profiles.$user_id_1 dup key: { : 212 }

.. seealso:: The MongoDB documentation on `indexes <https://www.mongodb.com/docs/manual/indexes/>`_

Geospatial Indexing Example
===========================

.. code-block:: python

  from pymongo import MongoClient

  client = MongoClient()
  client.drop_database("geo_example")

This example shows how to create and use a ``~pymongo.GEO2D``
index in PyMongo. To create a spherical (earth-like) geospatial index use ``~pymongo.GEOSPHERE`` instead.

.. seealso:: The MongoDB documentation on `Geospatial Indexes <https://dochub.mongodb.org/core/geo>`_.

Creating a Geospatial Index
---------------------------

Creating a geospatial index in pymongo is easy:

.. code-block:: python

  >>> from pymongo import MongoClient, GEO2D
  >>> db = MongoClient().geo_example
  >>> db.places.create_index([("loc", GEO2D)])
  'loc_2d'

Inserting Places
----------------

Locations in MongoDB are represented using either embedded documents
or lists where the first two elements are coordinates. Here, we'll
insert a couple of example locations:

.. code-block:: python

  >>> result = db.places.insert_many(
  ...     [{"loc": [2, 5]}, {"loc": [30, 5]}, {"loc": [1, 2]}, {"loc": [4, 4]}]
  ... )
  >>> result.inserted_ids
  [ObjectId('...'), ObjectId('...'), ObjectId('...'), ObjectId('...')]

.. note:: If specifying latitude and longitude coordinates in ``~pymongo.GEOSPHERE``, list the **longitude** first and then **latitude**.

Querying
--------

Using the geospatial index we can find documents near another point:

.. code-block:: python

  >>> import pprint
  >>> for doc in db.places.find({"loc": {"$near": [3, 6]}}).limit(3):
  ...     pprint.pprint(doc)
  ...
  {'_id': ObjectId('...'), 'loc': [2, 5]}
  {'_id': ObjectId('...'), 'loc': [4, 4]}
  {'_id': ObjectId('...'), 'loc': [1, 2]}

.. note:: If using ``pymongo.GEOSPHERE``, using $nearSphere is recommended.

The $maxDistance operator requires the use of ``~bson.son.SON``:

.. code-block:: python

  >>> from bson.son import SON
  >>> query = {"loc": SON([("$near", [3, 6]), ("$maxDistance", 100)])}
  >>> for doc in db.places.find(query).limit(3):
  ...     pprint.pprint(doc)
  ...
  {'_id': ObjectId('...'), 'loc': [2, 5]}
  {'_id': ObjectId('...'), 'loc': [4, 4]}
  {'_id': ObjectId('...'), 'loc': [1, 2]}

It's also possible to query for all items within a given rectangle
(specified by lower-left and upper-right coordinates):

.. code-block:: python

  >>> query = {"loc": {"$within": {"$box": [[2, 2], [5, 6]]}}}
  >>> for doc in db.places.find(query).sort("_id"):
  ...     pprint.pprint(doc)
  ...
  {'_id': ObjectId('...'), 'loc': [2, 5]}
  {'_id': ObjectId('...'), 'loc': [4, 4]}

Or circle (specified by center point and radius):

.. code-block:: python

  >>> query = {"loc": {"$within": {"$center": [[0, 0], 6]}}}
  >>> for doc in db.places.find(query).sort("_id"):
  ...     pprint.pprint(doc)
  ...
  {'_id': ObjectId('...'), 'loc': [2, 5]}
  {'_id': ObjectId('...'), 'loc': [1, 2]}
  {'_id': ObjectId('...'), 'loc': [4, 4]}

geoNear queries are also supported using ``~bson.son.SON``:

.. code-block:: python

  >>> from bson.son import SON
  >>> db.command(SON([('geoNear', 'places'), ('near', [1, 2])]))
  {'ok': 1.0, 'stats': ...}

.. warning:: Starting in MongoDB version 4.0, MongoDB deprecates the **geoNear** command. Use one of the following operations instead.

  * $geoNear - aggregation stage.
  * $near - query operator.
  * $nearSphere - query operator.
